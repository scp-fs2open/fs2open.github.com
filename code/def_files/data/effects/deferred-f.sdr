
#include "lighting.sdr"

#include "shadows.sdr"

in vec3 beamVec;
in vec3 lightPosition;
out vec4 fragOut0;

uniform sampler2D ColorBuffer;
uniform sampler2D NormalBuffer;
uniform sampler2D PositionBuffer;
uniform sampler2D SpecBuffer;
uniform sampler2DArray shadow_map;

layout (std140) uniform globalDeferredData {
	mat4 shadow_mv_matrix;
	mat4 shadow_proj_matrix[4];

	mat4 inv_view_matrix;

	float veryneardist;
	float neardist;
	float middist;
	float fardist;

	float invScreenWidth;
	float invScreenHeight;
};

layout (std140) uniform lightData {
	vec3 diffuseLightColor;
	float coneAngle;

	vec3 specLightColor;
	float coneInnerAngle;

	vec3 coneDir;
	bool dualCone;

	vec3 scale;
	float lightRadius;

	vec3 lightDir;
	int lightType;

	bool enable_shadows;
};

void GetLightInfo(vec3 position, out vec3 lightDir, out float attenuation)
{
	if (lightType == LT_DIRECTIONAL) {
		lightDir = normalize(lightPosition);
		attenuation = 1.0;
	} else {
		// Positional light source
		lightDir = lightPosition - position.xyz;
		float dist = length(lightDir);
		attenuation = 1.0 - clamp(dist / lightRadius, 0.0, 1.0);

		if(dist > lightRadius && lightType != LT_TUBE) {
			discard;
		}

		if (lightType == LT_TUBE) {  // Tube light
			float beamLength = length(beamVec);
			vec3 beamDir = beamVec / beamLength;
			//The actual 'lighting element' is shorter than the light volume cylinder
			//To compensate the light is moved forward along the beam one radius and the length shortened
			//this allows room for clean falloff of the light past the ends of beams.
			vec3 adjustedLightPos = lightPosition - (beamDir * lightRadius);
			beamLength = beamLength - (lightRadius * 2.0);
			//adjustments having been made, lightdir needs recalculating
			lightDir = adjustedLightPos - position.xyz;
			// Get nearest point on line
			float neardist = clamp(dot(lightDir, beamDir), 0.0, beamLength);
			// Move back from the endpoint of the beam along the beam by the distance we calculated
			vec3 nearest = adjustedLightPos - beamDir * neardist;
			lightDir = nearest - position.xyz;
			dist = length(lightDir);
			if(dist > lightRadius) {
				discard;
			}
			attenuation = 1.0 - clamp(dist / lightRadius, 0.0, 1.0);
		} else if (lightType == LT_CONE) {
			float coneDot = dot(normalize(-lightDir), coneDir);
			if(dualCone) {
				if(abs(coneDot) < coneAngle) {
					discard;
				} else {
					attenuation *= smoothstep(coneAngle, coneInnerAngle, abs(coneDot));
				}
			} else {
				if (coneDot < coneAngle) {
					discard;
				} else {
					attenuation *= smoothstep(coneAngle, coneInnerAngle, coneDot);
				}
			}
		}

		lightDir = normalize(lightDir);
	}
}

void main()
{
	vec2 screenPos = gl_FragCoord.xy * vec2(invScreenWidth, invScreenHeight);
	vec3 position = texture(PositionBuffer, screenPos).xyz;

	if(abs(dot(position, position)) < 0.1)
		discard;

	vec3 color = texture(ColorBuffer, screenPos).rgb;
	vec4 normalData = texture(NormalBuffer, screenPos);
	vec4 specColor = texture(SpecBuffer, screenPos);
	// The vector in the normal buffer could be longer than the unit vector since decal rendering only adds to the normal buffer
	vec3 normal = normalize(normalData.xyz);
	float gloss = normalData.a;
	float fresnel = specColor.a;
	vec3 eyeDir = normalize(-position);

	vec3 lightDir;
	float attenuation;

	GetLightInfo(position, lightDir, attenuation);

	if (enable_shadows) {
		vec4 fragShadowPos = shadow_mv_matrix * inv_view_matrix * vec4(position, 1.0);
		vec4 fragShadowUV[4];
		fragShadowUV[0] = transformToShadowMap(shadow_proj_matrix[0], 0, fragShadowPos);
		fragShadowUV[1] = transformToShadowMap(shadow_proj_matrix[1], 1, fragShadowPos);
		fragShadowUV[2] = transformToShadowMap(shadow_proj_matrix[2], 2, fragShadowPos);
		fragShadowUV[3] = transformToShadowMap(shadow_proj_matrix[3], 3, fragShadowPos);

		attenuation *= getShadowValue(shadow_map, -position.z, fragShadowPos.z, fragShadowUV, fardist, middist,
								neardist, veryneardist);
	}

	vec3 halfVec = normalize(lightDir + eyeDir);
	float NdotL = clamp(dot(normal, lightDir), 0.0, 1.0);
	vec4 fragmentColor = vec4(color * (diffuseLightColor * NdotL * attenuation), 1.0);
	fragmentColor.rgb += computeLighting(specColor.rgb, lightDir, normal.xyz, halfVec, eyeDir, gloss, fresnel, NdotL).rgb * specLightColor * attenuation;
	fragOut0 = max(fragmentColor, vec4(0.0));
}
