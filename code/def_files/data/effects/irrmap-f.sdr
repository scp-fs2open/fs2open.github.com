//!#version 150
#include "gamma.sdr" //! #include "gamma.sdr"
#define PI 3.1415926535897932384626433832795
uniform samplerCube envmap;

layout (std140) uniform genericData {
	int face;
};

in vec4 fragTexCoord;

out vec4 fragOut0;

// Iteratively optimised points to give low discrepancy distribution on arbritrary hemisphere.
const vec3 points[128] = vec3[128](
vec3(-0.2268,  0.6185,  0.7523),
vec3( 0.9958, -0.0871, -0.0277),
vec3( 0.7132, -0.6099,  0.3455),
vec3(-0.9243, -0.3644,  0.1137),
vec3( 0.4580, -0.3977, -0.7950),
vec3(-0.2989, -0.7422, -0.5998),
vec3(-0.7263, -0.5965,  0.3416),
vec3(-0.7906,  0.4955,  0.3597),
vec3(-0.5006, -0.5116,  0.6984),
vec3( 0.3924,  0.8514,  0.3479),
vec3(-0.5916, -0.8009,  0.0925),
vec3( 0.5076,  0.2359, -0.8287),
vec3(-0.6712,  0.5976, -0.4386),
vec3( 0.5255, -0.5998, -0.6034),
vec3( 0.2083,  0.7588, -0.6172),
vec3( 0.8282,  0.0486,  0.5584),
vec3( 0.2563, -0.6217, -0.7401),
vec3(-0.4601,  0.2289, -0.8579),
vec3( 0.6840,  0.5803, -0.4421),
vec3(-0.0167,  0.9512, -0.3080),
vec3( 0.2259,  0.3423,  0.9120),
vec3( 0.3726, -0.7409,  0.5587),
vec3( 0.0440, -0.4696,  0.8818),
vec3(-0.5011, -0.6169, -0.6069),
vec3( 0.2801,  0.8534,  0.4396),
vec3(-0.2464, -0.9090,  0.3360),
vec3(-0.7297,  0.1734,  0.6614),
vec3(-0.2619,  0.2954,  0.9188),
vec3( 0.1519, -0.5555, -0.8176),
vec3(-0.6161, -0.7542,  0.2274),
vec3( 0.3067, -0.8999, -0.3100),
vec3( 0.4223, -0.6110,  0.6696),
vec3(-0.7079,  0.5325,  0.4640),
vec3( 0.9522, -0.3022,  0.0443),
vec3(-0.3054, -0.5260, -0.7937),
vec3(-0.7502,  0.1605, -0.6414),
vec3( 0.9070, -0.0741, -0.4145),
vec3(-0.1592,  0.8002, -0.5783),
vec3( 0.7672,  0.4286,  0.4772),
vec3(-0.9340,  0.2468, -0.2584),
vec3( 0.9905, -0.1254,  0.0563),
vec3(-0.7776, -0.4144, -0.4729),
vec3(-0.7503,  0.6316, -0.1952),
vec3(-0.3313, -0.2916, -0.8973),
vec3( 0.1147, -0.7738,  0.6230),
vec3( 0.1481,  0.3008, -0.9421),
vec3(-0.8300,  0.0980,  0.5491),
vec3(-0.1374,  0.9904,  0.0163),
vec3( 0.0996, -0.9950, -0.0014),
vec3( 0.7040,  0.0177, -0.7100),
vec3(-0.3455,  0.8607, -0.3740),
vec3(-0.6005,  0.2897,  0.7453),
vec3( 0.3546, -0.8403, -0.4100),
vec3(-0.5317,  0.5463, -0.6472),
vec3( 0.4780, -0.1825, -0.8592),
vec3( 0.3033, -0.1953,  0.9327),
vec3(-0.8416, -0.1018, -0.5304),
vec3( 0.2834, -0.6792, -0.6771),
vec3( 0.9488,  0.1900, -0.2522),
vec3( 0.3215,  0.7569, -0.5690),
vec3(-0.7391,  0.5883, -0.3281),
vec3( 0.4351, -0.2649,  0.8605),
vec3( 0.0829, -0.8264,  0.5570),
vec3(-0.6900,  0.5097,  0.5139),
vec3( 0.6869, -0.5626,  0.4601),
vec3(-0.9385, -0.1405, -0.3153),
vec3(-0.2377,  0.7921,  0.5622),
vec3( 0.3259, -0.1633, -0.9312),
vec3( 0.4753,  0.8652, -0.1597),
vec3( 0.9267,  0.0849, -0.3661),
vec3(-0.8777, -0.4241, -0.2231),
vec3( 0.5195, -0.8463, -0.1177),
vec3(-0.2962, -0.5401,  0.7878),
vec3( 0.9439,  0.3300, -0.0130),
vec3(-0.9481,  0.2886,  0.1333),
vec3(-0.0272, -0.5312,  0.8468),
vec3(-0.3538,  0.6180, -0.7021),
vec3(-0.9996,  0.0160, -0.0217),
vec3( 0.2800, -0.3399,  0.8978),
vec3( 0.2090,  0.9773,  0.0338),
vec3( 0.5249,  0.0450,  0.8500),
vec3( 0.8165,  0.3275, -0.4755),
vec3( 0.1568, -0.6439, -0.7489),
vec3( 0.3034,  0.6192, -0.7243),
vec3(-0.7233, -0.6519, -0.2278),
vec3(-0.8259, -0.4757,  0.3027),
vec3( 0.2690, -0.7823,  0.5618),
vec3( 0.3309,  0.4864, -0.8087),
vec3(-0.3891,  0.4036,  0.8281),
vec3(-0.0919,  0.1208,  0.9884),
vec3(-0.2482, -0.5348,  0.8077),
vec3( 0.8195,  0.3333,  0.4661),
vec3( 0.7890, -0.6104,  0.0702),
vec3(-0.4653,  0.8046,  0.3688),
vec3(-0.0413, -0.2247, -0.9736),
vec3( 0.1926,  0.2839, -0.9393),
vec3( 0.9205, -0.2443, -0.3048),
vec3(-0.4891,  0.8229,  0.2891),
vec3(-0.9010, -0.4189, -0.1128),
vec3( 0.0706,  0.2715,  0.9598),
vec3(-0.2682,  0.4639, -0.8443),
vec3(-0.6389, -0.0442,  0.7680),
vec3(-0.2588,  0.9613, -0.0949),
vec3( 0.5469, -0.4194,  0.7246),
vec3( 0.8399,  0.3814,  0.3860),
vec3( 0.8060, -0.3544, -0.4741),
vec3(-0.7109, -0.4466,  0.5432),
vec3(-0.2986, -0.9381, -0.1753),
vec3( 0.3983, -0.3642, -0.8418),
vec3( 0.4518,  0.8744,  0.1770),
vec3( 0.8792, -0.4098,  0.2432),
vec3(-0.7904,  0.6106, -0.0494),
vec3( 0.1667, -0.2852, -0.9438),
vec3( 0.5566,  0.6694,  0.4920),
vec3( 0.1761,  0.9638,  0.2000),
vec3( 0.6951,  0.7188,  0.0090),
vec3(-0.2659, -0.0544,  0.9625),
vec3(-0.0370,  0.6667,  0.7444),
vec3( 0.1119, -0.5816,  0.8058),
vec3(-0.1706, -0.9310, -0.3226),
vec3( 0.5573, -0.8143,  0.1624),
vec3( 0.3899, -0.9183,  0.0682),
vec3(-0.2921, -0.7937,  0.5336),
vec3( 0.8488,  0.4895,  0.1997),
vec3(-0.6887,  0.1527,  0.7088),
vec3(-0.3092,  0.0011, -0.9510),
vec3( 0.3066,  0.6124,  0.7287),
vec3( 0.7305,  0.6698,  0.1333)
);

void main() {
	float xpos = 2 * gl_FragCoord.x/16 - 1; // remap to (-1, 1)
	float ypos = 2 * gl_FragCoord.y/16 - 1;
	vec3 fragDir;
	vec4 fragCol = vec4(0.0);

	switch (face) { 
	case 0: // +X
		fragDir = vec3(1.0, -ypos, -xpos);
		break;
	case 1: // -X
		fragDir = vec3(-1.0, -ypos, xpos);
		break;
	case 2: // +Y
		fragDir = vec3(xpos, 1.0, ypos);
		break;
	case 3: //  -Y
		fragDir = vec3(xpos, -1.0, -ypos);
		break;
	case 4: //  +Z
		fragDir = vec3(xpos, -ypos, 1.0);
		break;
	case 5: //  -Z
		fragDir = vec3(-xpos, -ypos, -1.0);
		break;
	}
	fragDir = normalize(fragDir);
	for(int i=0;i<128;++i)
	{
		// This precalcualted sampling method seems weird, but by having a set of fixed directions
		// and mirroring the bad ones onto the correct side of the normal means that
		// approximately 50% of envmap texture samples (the non-mirrored ones) 
		// are shared between adjacent fragments, improving texture cache hit rate.
		float PdotD = dot(points[i], fragDir);
		float aPdotD = abs(PdotD);
		vec3 sampDir = points[i] + (aPdotD - PdotD) * fragDir;
		fragCol += aPdotD * vec4(srgb_to_linear(texture(envmap, sampDir)).rgb, 1.0);
	}
	fragOut0 = linear_to_srgb(PI * fragCol * (1.0/128));
}