vec3 blur(in float xSize, in float ySize, in sampler2D tex, in float mip, in vec2 center)
{
    // The filter kernel is applied with a radius, specified in texture
    // coordinates, so that the radius will vary across mip resolutions.
    float x = xSize;
    float y = ySize;

    // Take 9 samples around current texel:
    // a - b - c
    // d - e - f
    // g - h - i
    // === ('e' is the current texel) ===
    vec3 a = textureLod(tex, vec2(center.x - x, center.y + y),mip).rgb;
    vec3 b = textureLod(tex, vec2(center.x,     center.y + y),mip).rgb;
    vec3 c = texture(tex, vec2(center.x + x, center.y + y),mip).rgb;

    vec3 d = textureLod(tex, vec2(center.x - x, center.y),mip).rgb;
    vec3 e = textureLod(tex, vec2(center.x,     center.y),mip).rgb;
    vec3 f = textureLod(tex, vec2(center.x + x, center.y),mip).rgb;

    vec3 g = textureLod(tex, vec2(center.x - x, center.y - y),mip).rgb;
    vec3 h = textureLod(tex, vec2(center.x,     center.y - y),mip).rgb;
    vec3 i = textureLod(tex, vec2(center.x + x, center.y - y),mip).rgb;

    // Apply weighted distribution, by using a 3x3 tent filter:
    //  1   | 1 2 1 |
    // -- * | 2 4 2 |
    // 16   | 1 2 1 |
    vec3 upsample = e*4.0;
    upsample += (b+d+f+h)*2.0;
    upsample += (a+c+g+i);
    upsample *= 1.0 / 16.0;
	return upsample;
}