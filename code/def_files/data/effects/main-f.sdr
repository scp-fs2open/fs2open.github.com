#define MAX_LIGHTS 8
#define LT_DIRECTIONAL		0
#define LT_POINT			1
#define LT_TUBE			2
struct model_light {
	vec4 position;

	vec3 diffuse_color;
	int light_type;

	vec3 spec_color;
	float attenuation;

	vec3 direction;
};

layout (std140) uniform modelData {
	mat4 modelViewMatrix;
	mat4 modelMatrix;
	mat4 viewMatrix;
	mat4 projMatrix;
	mat4 textureMatrix;
	mat4 shadow_mv_matrix;
	mat4 shadow_proj_matrix[4];
	mat4 envMatrix;

	vec4 color;

	model_light lights[MAX_LIGHTS];

	float extrudeWidth;
	float fogStart;
	float fogScale;
	int buffer_matrix_offset;

	vec4 clip_equation;

	float thruster_scale;
	bool use_clip_plane;
	int n_lights;
	float defaultGloss;

	vec3 ambientFactor;
	int desaturate;

	vec3 diffuseFactor;
	int blend_alpha;

	vec3 emissionFactor;
	bool overrideDiffuse;

	vec3 diffuseClr;
	bool overrideGlow;

	vec3 glowClr;
	bool overrideSpec;

	vec3 specClr;
	bool alphaGloss;

	bool gammaSpec;
	bool envGloss;
	bool alpha_spec;
	int effect_num;

	vec4 fogColor;

	vec3 base_color;
	float anim_timer;

	vec3 stripe_color;
	float vpwidth;

	float vpheight;
	bool team_glow_enabled;
	float znear;
	float zfar;

	float veryneardist;
	float neardist;
	float middist;
	float fardist;

	vec2 normalAlphaMinMax;
	int sBasemapIndex;
	int sGlowmapIndex;

	int sSpecmapIndex;
	int sNormalmapIndex;
	int sAmbientmapIndex;
	int sMiscmapIndex;
};

#ifdef FLAG_DIFFUSE_MAP
uniform sampler2DArray sBasemap;
#endif
#ifdef FLAG_GLOW_MAP
uniform sampler2DArray sGlowmap;
#endif
#ifdef FLAG_SPEC_MAP
uniform sampler2DArray sSpecmap;
#endif
#ifdef FLAG_ENV_MAP
uniform samplerCube sEnvmap;
in vec3 fragEnvReflect;
#endif
#ifdef FLAG_NORMAL_MAP
uniform sampler2DArray sNormalmap;
in mat3 fragTangentMatrix;
#endif
#ifdef FLAG_AMBIENT_MAP
uniform sampler2DArray sAmbientmap;
#endif
#ifdef FLAG_FOG
in float fragFogDist;
#endif
#ifdef FLAG_ANIMATED
uniform sampler2D sFramebuffer;
#endif
#ifdef WORKAROUND_CLIPPING_PLANES
 #ifdef FLAG_TRANSFORM
in float fragNotVisible;
 #endif
#endif
#ifdef FLAG_TEAMCOLOR
vec2 teamMask = vec2(0.0, 0.0);
#endif
#ifdef FLAG_MISC_MAP
uniform sampler2DArray sMiscmap;
#endif
#ifdef FLAG_SHADOWS
in vec4 fragShadowUV[4];
in vec4 fragShadowPos;
uniform sampler2DArray shadow_map;
#endif
#define SPEC_INTENSITY_POINT      5.3 // Point light
#define SPEC_INTENSITY_DIRECTIONAL   3.0 // Directional light
#define SPECULAR_FACTOR         1.75
#define SPEC_FACTOR_NO_SPEC_MAP   0.6
#define ENV_ALPHA_FACTOR         0.3
#define GLOW_MAP_INTENSITY         1.5
#define AMBIENT_LIGHT_BOOST      1.0
#define VARIANCE_SHADOW_SCALE		1000000.0
#define VARIANCE_SHADOW_SCALE_INV	1.0/VARIANCE_SHADOW_SCALE
#define SRGB_GAMMA 2.2
in vec4 fragPosition;
in vec3 fragNormal;
in vec4 fragTexCoord;
out vec4 fragOut0;
out vec4 fragOut1;
out vec4 fragOut2;
out vec4 fragOut3;

#ifdef FLAG_SHADOWS
vec2 sampleShadowMap(vec2 uv, vec2 offset_uv, int cascade, float shadowMapSizeInv)
{
	return texture(shadow_map, vec3(uv + offset_uv * shadowMapSizeInv, float(cascade))).xy;
}

float computeShadowFactor(vec2 moments, float bias)
{
	float shadow = 1.0;
	if((moments.x - bias) > fragShadowPos.z)
	{
		// variance shadow mapping using Chebychev's Formula
		float variance = moments.y * VARIANCE_SHADOW_SCALE - moments.x * moments.x;
		float mD = moments.x - bias - fragShadowPos.z;
		shadow = variance / (variance + mD * mD);
		shadow = clamp(shadow, 0.0, 1.0);
	}
	return shadow;
}

float sampleNoPCF(int cascade)
{
	return computeShadowFactor(sampleShadowMap(fragShadowUV[cascade].xy, vec2(0.0, 0.0), cascade, 1.0/1024.0), 0.05);
}

float samplePoissonPCF(int cascade)
{
	if(cascade > 3 || cascade < 0) return 1.0;
	vec2 poissonDisc[16];
	poissonDisc[0] = vec2(-0.76275, -0.3432573);
	poissonDisc[1] = vec2(-0.5226235, -0.8277544);
	poissonDisc[2] = vec2(-0.3780261, 0.01528688);
	poissonDisc[3] = vec2(-0.7742821, 0.4245702);
	poissonDisc[4] = vec2(0.04196143, -0.02622231);
	poissonDisc[5] = vec2(-0.2974772, -0.4722782);
	poissonDisc[6] = vec2(-0.516093, 0.71495);
	poissonDisc[7] = vec2(-0.3257416, 0.3910343);
	poissonDisc[8] = vec2(0.2705966, 0.6670476);
	poissonDisc[9] = vec2(0.4918377, 0.1853267);
	poissonDisc[10] = vec2(0.4428544, -0.6251478);
	poissonDisc[11] = vec2(-0.09204347, 0.9267113);
	poissonDisc[12] = vec2(0.391505, -0.2558275);
	poissonDisc[13] = vec2(0.05605913, -0.7570801);
	poissonDisc[14] = vec2(0.81772, -0.02475523);
	poissonDisc[15] = vec2(0.6890262, 0.5191521);
	float maxUVOffset[4];
	maxUVOffset[0] = 1.0/300.0;
	maxUVOffset[1] = 1.0/250.0;
	maxUVOffset[2] = 1.0/200.0;
	maxUVOffset[3] = 1.0/200.0;
	vec2 sum = sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[0], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[1], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[2], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[3], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[4], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[5], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[6], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[7], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[8], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[9], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[10], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[11], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[12], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[13], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[14], cascade, maxUVOffset[cascade])*(1.0/16.0);
	sum += sampleShadowMap(fragShadowUV[cascade].xy, poissonDisc[15], cascade, maxUVOffset[cascade])*(1.0/16.0);
	return computeShadowFactor(sum, 0.1);
}

float getShadowValue()
{
	// Valathil's Shadows
	float depth = -fragPosition.z;
	int cascade = 4;
	cascade -= int(step(depth, fardist));
	cascade -= int(step(depth, middist));
	cascade -= int(step(depth, neardist));
	cascade -= int(step(depth, veryneardist));
	float cascade_start_dist[5];
	cascade_start_dist[0] = 0.0;
	cascade_start_dist[1] = veryneardist;
	cascade_start_dist[2] = neardist;
	cascade_start_dist[3] = middist;
	cascade_start_dist[4] = fardist;
	if(cascade > 3 || cascade < 0) return 1.0;
	float dist_threshold = (cascade_start_dist[cascade+1] - cascade_start_dist[cascade])*0.2;
	if(cascade_start_dist[cascade+1] - dist_threshold > depth)
		return samplePoissonPCF(cascade);
	return mix(samplePoissonPCF(cascade), samplePoissonPCF(cascade+1), smoothstep(cascade_start_dist[cascade+1] - dist_threshold, cascade_start_dist[cascade+1], depth));
}
#endif

vec3 FresnelLazarovEnv(vec3 specColor, vec3 view, vec3 normal, float gloss)
{
	// Fresnel for environment lighting 
	// Equation referenced from Dimitar Lazarov's presentation titled Physically Based Rendering in Call of Duty: Black Ops
	return specColor + (vec3(1.0) - specColor) * pow(1.0 - clamp(dot(view, normal), 0.0, 1.0), 5.0) / (4.0 - 3.0 * gloss);
}

vec3 FresnelSchlick(vec3 specColor, vec3 light, vec3 halfVec)
{
	return specColor + (vec3(1.0) - specColor) * pow(1.0 - clamp(dot(light, halfVec), 0.0, 1.0), 5.0);
}

vec3 SpecularBlinnPhong(vec3 specColor, vec3 light, vec3 normal, vec3 halfVec, float specPower, float fresnel, float dotNL)
{
	return mix(specColor, FresnelSchlick(specColor, light, halfVec), fresnel) * ((specPower + 2.0) / 8.0 ) * pow(clamp(dot(normal, halfVec), 0.0, 1.0), specPower) * dotNL;
}

vec3 SpecularGGX(vec3 specColor, vec3 light, vec3 normal, vec3 halfVec, vec3 view, float gloss, float fresnelFactor, float dotNL)
{
	float roughness = clamp(1.0f - gloss, 0.0f, 1.0f);
	float alpha = roughness * roughness;

	float dotNH = clamp(dot(normal, halfVec), 0.0f, 1.0f);
	float dotNV = clamp(dot(normal, view), 0.0f, 1.0f);

	float alphaSqr = alpha * alpha;
	float pi = 3.14159f;
	float denom = dotNH * dotNH * (alphaSqr - 1.0f) + 1.0f;
	float distribution = alphaSqr / (pi * denom * denom);

	vec3 fresnel = mix(specColor, FresnelSchlick(specColor, light, halfVec), fresnelFactor);
	
	float alphaPrime = roughness + 1.0f;
	float k = alphaPrime * alphaPrime / 8.0f;
	float g1vNL = 1.0f / (dotNL * (1.0f - k) + k);
	float g1vNV = 1.0f / (dotNV * (1.0f - k) + k);
	float visibility = g1vNL * g1vNV;

	return distribution * fresnel * visibility * dotNL;
}

#ifdef FLAG_LIGHT
void GetLightInfo(int i, out vec3 lightDir, out float attenuation)
{
	lightDir = normalize(lights[i].position.xyz);
	attenuation = 1.0;
	if (lights[i].light_type != LT_DIRECTIONAL) {
		// Positional light source
		float dist = distance(lights[i].position.xyz, fragPosition.xyz);
		lightDir = (lights[i].position.xyz - fragPosition.xyz);

		if (lights[i].light_type == LT_TUBE) {  // Tube light
			float beamlength = length(lights[i].direction);
			vec3 beamDir = normalize(lights[i].direction);
			// Get nearest point on line
			float neardist = dot(fragPosition.xyz - lights[i].position.xyz, beamDir);
			// Move back from the endpoint of the beam along the beam by the distance we calculated
			vec3 nearest = lights[i].position.xyz - beamDir * abs(neardist);
			lightDir = nearest - fragPosition.xyz;
			dist = length(lightDir);
		}

		lightDir = normalize(lightDir);
		attenuation = 1.0 / (1.0 + lights[i].attenuation * dist);
	}
}
vec3 CalculateLighting(vec3 normal, vec3 diffuseMaterial, vec3 specularMaterial, float gloss, float fresnel, float shadow, float aoFactor)
{
	vec3 eyeDir = vec3(normalize(-fragPosition).xyz);
	vec3 lightAmbient = (emissionFactor + ambientFactor * ambientFactor) * aoFactor; // ambientFactor^2 due to legacy OpenGL compatibility behavior
	vec3 lightDiffuse = vec3(0.0, 0.0, 0.0);
	vec3 lightSpecular = vec3(0.0, 0.0, 0.0);
	#pragma optionNV unroll all
	for (int i = 0; i < n_lights; ++i) {
        if(i > 0) {
            shadow = 1.0;
        }

		vec3 lightDir;
		float attenuation;
		// gather light params
		GetLightInfo(i, lightDir, attenuation);
		vec3 halfVec = normalize(lightDir + eyeDir);
		float NdotL = clamp(dot(normal, lightDir), 0.0f, 1.0f);
		// Ambient, Diffuse, and Specular
		lightDiffuse += (lights[i].diffuse_color.rgb * diffuseFactor * NdotL * attenuation) * shadow;
		lightSpecular += lights[i].spec_color * SpecularGGX(specularMaterial, lightDir, normal, halfVec, eyeDir, gloss, fresnel, NdotL) * attenuation * shadow;
	}
	return diffuseMaterial * (lightAmbient + lightDiffuse) + lightSpecular;
}
#endif
void main()
{
#ifdef WORKAROUND_CLIPPING_PLANES
 #ifdef FLAG_TRANSFORM
	if(fragNotVisible >= 0.9) { discard; }
 #endif
#endif
#ifdef FLAG_SHADOW_MAP
	// need depth and depth squared for variance shadow maps
	fragOut0 = vec4(fragPosition.z, fragPosition.z * fragPosition.z * VARIANCE_SHADOW_SCALE_INV, 0.0, 1.0);
	return;
#endif
	vec3 eyeDir = vec3(normalize(-fragPosition).xyz);
	vec2 texCoord = fragTexCoord.xy;
	vec4 baseColor = color;
	vec4 specColor = vec4(0.0, 0.0, 0.0, 1.0);
	float fresnelFactor = 0.0;
	float glossData = 0.6;
#ifdef FLAG_LIGHT
	glossData = defaultGloss;
#endif
	vec2 aoFactors = vec2(1.0, 1.0);
#ifdef	FLAG_AMBIENT_MAP
	// red channel is ambient occlusion factor which only affects ambient lighting.
	// green is cavity occlusion factor which only affects diffuse and specular lighting.
	aoFactors = texture(sAmbientmap, vec3(texCoord, float(sAmbientmapIndex))).xy;
#endif
	vec3 unitNormal = normalize(fragNormal);
	vec3 normal = unitNormal;
#ifdef FLAG_NORMAL_MAP
   // Normal map - convert from DXT5nm
   vec2 normalSample;
   normal.rg = normalSample = (texture(sNormalmap, vec3(texCoord, float(sNormalmapIndex))).ag * 2.0) - 1.0;
   normal.b = clamp(sqrt(1.0 - dot(normal.rg, normal.rg)), 0.0001, 1.0);
   normal = fragTangentMatrix * normal;
   float norm = length(normal);
   // prevent breaking of normal maps
   if (norm > 0.0)
      normal /= norm;
   else
      normal = unitNormal;
#endif

#ifdef FLAG_ANIMATED
   vec2 distort = vec2(cos(fragPosition.x*fragPosition.w*0.005+anim_timer*20.0)*sin(fragPosition.y*fragPosition.w*0.005),sin(fragPosition.x*fragPosition.w*0.005+anim_timer*20.0)*cos(fragPosition.y*fragPosition.w*0.005))*0.03;
#endif

#ifdef FLAG_DIFFUSE_MAP
	vec2 diffuseTexCoord = texCoord;
 #ifdef FLAG_ANIMATED
   if (effect_num == 2) {
      diffuseTexCoord = texCoord + distort*(1.0-anim_timer);
   }
 #endif
	baseColor = texture(sBasemap, vec3(diffuseTexCoord, float(sBasemapIndex)));
	if ( blend_alpha == 0 && baseColor.a < 0.95 ) discard; // if alpha blending is not on, discard transparent pixels
	// premultiply alpha if blend_alpha is 1. assume that our blend function is srcColor + (1-Alpha)*destColor.
	// if blend_alpha is 2, assume blend func is additive and don't modify color
	if(blend_alpha == 1) baseColor.rgb = baseColor.rgb * baseColor.a;
	if(overrideDiffuse) baseColor.rgb = diffuseClr;
#endif
	specColor = vec4(baseColor.rgb * SPEC_FACTOR_NO_SPEC_MAP, glossData);
#ifdef FLAG_HDR
	baseColor.rgb = pow(baseColor.rgb, vec3(SRGB_GAMMA));
#endif
#ifdef FLAG_SPEC_MAP
	specColor = texture(sSpecmap, vec3(texCoord, float(sSpecmapIndex)));
	if(alphaGloss) glossData = specColor.a;
	if(overrideSpec) {
		specColor.rgb = specClr;
		fresnelFactor = 1.0;
	}
	if(gammaSpec) {
		specColor.rgb = max(specColor.rgb, vec3(0.03f)); // hardcoded minimum specular value. read John Hable's blog post titled 'Everything Is Shiny'. 
 #ifdef FLAG_HDR
		specColor.rgb = pow(specColor.rgb, vec3(SRGB_GAMMA));
 #endif
		fresnelFactor = 1.0;
	}
#endif
	baseColor.rgb *= aoFactors.y;
	specColor.rgb *= aoFactors.y;
#ifdef FLAG_MISC_MAP
 #ifdef FLAG_TEAMCOLOR
	vec4 teamMask = vec4(0.0, 0.0, 0.0, 0.0);
	teamMask = texture(sMiscmap, vec3(texCoord, float(sMiscmapIndex)));
	vec3 base = max(base_color - vec3(0.5), vec3(0.0));
	vec3 stripe = max(stripe_color - vec3(0.5), vec3(0.0));
	baseColor.rgb += (base * teamMask.x) + (stripe * teamMask.y);
	baseColor.rgb = max(baseColor.rgb, vec3(0.0));
 #endif
#endif
	float shadow = 1.0;
#ifdef FLAG_SHADOWS
	shadow = getShadowValue();
#endif
#ifdef FLAG_LIGHT
	baseColor.rgb = CalculateLighting(normal, baseColor.rgb, specColor.rgb, glossData, fresnelFactor, shadow, aoFactors.x);
#else
 #ifdef FLAG_SPEC_MAP
	baseColor.rgb += pow(1.0 - clamp(dot(eyeDir, normal), 0.0, 1.0), 5.0 * clamp(glossData, 0.01, 1.0)) * specColor.rgb;
 #endif
#endif
#ifdef FLAG_ENV_MAP
   vec3 envReflectNM = fragEnvReflect;
 #ifdef FLAG_NORMAL_MAP
   envReflectNM += vec3(normalSample, 0.0);
	envReflectNM = normalize(envReflectNM);
 #endif
	float mip = (envGloss) ? (1.0 - glossData) * 7.0 : 0.0;
   vec4 envColour = textureLod(sEnvmap, envReflectNM, mip);
 #ifdef FLAG_HDR
	envColour.rgb = pow(envColour.rgb, vec3(SRGB_GAMMA));
 #endif
	envColour.rgb *= (envGloss) ? 1.0 : specColor.a;
	baseColor.rgb += envColour.rgb * FresnelLazarovEnv(specColor.rgb, eyeDir, normal, glossData);
#endif
#ifdef FLAG_GLOW_MAP
	vec3 glowColor = texture(sGlowmap, vec3(texCoord, float(sGlowmapIndex))).rgb;
	if(overrideGlow) glowColor = glowClr;
 #ifdef FLAG_HDR
	glowColor = pow(glowColor, vec3(SRGB_GAMMA)) * 3.0f;
 #endif
 #ifdef FLAG_MISC_MAP
  #ifdef FLAG_TEAMCOLOR
	float glowColorLuminance = dot(glowColor, vec3(0.299, 0.587, 0.114));
	glowColor = team_glow_enabled ? mix((base * teamMask.b) + (stripe * teamMask.a), glowColor, clamp(glowColorLuminance - teamMask.b - teamMask.a, 0.0, 1.0)) : glowColor;
  #endif
 #endif
   baseColor.rgb += glowColor * GLOW_MAP_INTENSITY;
#endif

#ifdef FLAG_FOG
	vec3 finalFogColor = fogColor.rgb;
 #ifdef FLAG_HDR
	finalFogColor = pow(finalFogColor, vec3(SRGB_GAMMA));
 #endif
 #ifdef FLAG_DIFFUSE_MAP
	if(blend_alpha == 1) finalFogColor *= baseColor.a;
 #endif
	baseColor.rgb = mix(baseColor.rgb, finalFogColor, fragFogDist);
	specColor.rgb *= fragFogDist;
#endif

#ifdef FLAG_DIFFUSE_MAP
	if(desaturate == 1) {
		baseColor.rgb = color.rgb * dot(vec3(1.0), baseColor.rgb) * 0.3333333;
	}
#endif
#ifdef FLAG_ANIMATED
   if (effect_num == 0) {
      float shinefactor = 1.0/(1.0 + pow(abs((fract(abs(texCoord.x))-anim_timer) * 1000.0), 2.0)) * 1000.0;
      baseColor.rgb = baseColor.rgb + vec3(shinefactor);
      baseColor.a = baseColor.a * clamp(shinefactor * (fract(abs(texCoord.x))-anim_timer) * -10000.0,0.0,1.0);
   }
   if (effect_num == 1) {
      float shinefactor = 1.0/(1.0 + pow(abs(fragPosition.y-anim_timer), 2.0));
      baseColor.rgb = baseColor.rgb + vec3(shinefactor);
 #ifdef FLAG_LIGHT
      baseColor.a = baseColor.a;
 #else
      // ATI Wireframe fix *grumble*
      baseColor.a = clamp((fragPosition.y-anim_timer) * 10000.0,0.0,1.0);
 #endif
   }
   if (effect_num == 2) {
      vec2 screenPos = gl_FragCoord.xy * vec2(vpwidth,vpheight);
      baseColor.a = baseColor.a;
      float cloak_interp = (sin(fragPosition.x*fragPosition.w*0.005+anim_timer*20.0)*sin(fragPosition.y*fragPosition.w*0.005)*0.5)-0.5;
 #ifdef FLAG_LIGHT
      baseColor.rgb = mix(texture(sFramebuffer, screenPos + distort*anim_timer + anim_timer*0.1*normal.xy).rgb,baseColor.rgb,clamp(cloak_interp+anim_timer*2.0,0.0,1.0));
 #else
      baseColor.rgb = mix(texture(sFramebuffer, screenPos + distort*anim_timer + anim_timer*0.1*fragNormal.xy).rgb,baseColor.rgb,clamp(cloak_interp+anim_timer*2.0,0.0,1.0));
 #endif
   }
#endif
#ifdef FLAG_NORMAL_ALPHA
	float normViewOffset = dot(vec3(0.0, 0.0, 1.0), normal);
	baseColor.a = smoothstep(min(normalAlphaMinMax.x, normalAlphaMinMax.y), max(normalAlphaMinMax.x, normalAlphaMinMax.y), clamp(normalAlphaMinMax.x > normalAlphaMinMax.y ? normViewOffset : 1.0 - normViewOffset, 0.0, 1.0));
#endif
	fragOut0 = baseColor;
#ifdef FLAG_DEFERRED
	fragOut1 = vec4(fragPosition.xyz, 1.0);
	fragOut2 = vec4(normal, glossData);
	fragOut3 = vec4(specColor.rgb, fresnelFactor);
#endif
}
